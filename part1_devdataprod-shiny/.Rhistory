g4<-sin(2*pi*notes4[5]*t)
chord<-c4+e4+g4+rnorm(n,0,0.3)
x<-sapply(notes4,function(freq)sin(2*pi*freq*t))
fit<-lm(chord~x-1)
library(knitr)
library(ggplot2)
mt <- mtcars;
boxplot(mpg~am,data = mt )
boxplot(mpg~am, data = mt, main="Comparing transmission types by the average mpg" )
boxplot(mpg~am, data = mt, main="Comparing transmission types by the average mpg",
col=am)
boxplot(mpg~am, data = mt, main="Comparing transmission types by the average mpg",
col=c("blue","gray"))
boxplot(mpg~am, data = mt, main="Comparing transmission types by the average mpg",
col=c("gray","blue"))
boxplot(count ~ spray, data = InsectSprays,
notch = TRUE, add = TRUE, col = "blue")
boxplot(mpg~am, data = mt, main="Comparing transmission types by the average mpg",
col=c("gray","blue"))
legend(0, 1, c("Manual", "Automatic"),
fill = c("gray", "blue"))
boxplot(mpg~am, data = mt, main="Comparing transmission types by the average mpg",
col=c("gray","blue"))
legend("bottomright", inset = .02, title = "Type of Transmission",
c("0","1"), fill = topo.colors(2), horiz = T, cex = 0.8)
legend("bottomright", inset = .02, title = "Type of Transmission",
c("0","1"), fill = topo.colors(c("gray","blue")), horiz = T, cex = 0.8)
legend("bottomright", inset = .02, title = "Type of Transmission",
c("0","1"), fill = topo.colors(2), horiz = T, cex = 0.8)
boxplot(mpg~am, data = mt, main="Comparing transmission types by the average mpg",
col=topo.colors(2))
legend("bottomright", inset = .02, title = "Type of Transmission",
c("0","1"), fill = topo.colors(2), horiz = T, cex = 0.8)
legend("upperleft", inset = .02, title = "Type of Transmission",
c("0","1"), fill = topo.colors(2), horiz = T, cex = 0.8)
legend("upleft", inset = .02, title = "Type of Transmission",
c("0","1"), fill = topo.colors(2), horiz = T, cex = 0.8)
legend("topleft", inset = .02, title = "Type of Transmission",
c("0","1"), fill = topo.colors(2), horiz = T, cex = 0.8)
boxplot(mpg~am, data = mt, main="Comparing transmission types by the average mpg",
col=topo.colors(2))
legend("topleft", inset = .02, title = "Type of Transmission",
c("0","1"), fill = topo.colors(2), horiz = T, cex = 0.8)
legend("topleft", inset = .02, title = "Type of Transmission",
c("manual","automatic"), fill = topo.colors(2), horiz = T, cex = 0.8)
mt <- mtcars
mt$am <- as.factor(mt$am)
levels(mt$am) <- c("Automatic","Manual")
head(mt,6)
aggregate(mpg~am, data = mt, mean)
mt1 <- sort(cor(mtcars)[1,])
mt1 <- as.data.frame(sort(cor(mtcars)[1,]))
View(mt1)
plot(as.data.frame(sort(cor(mtcars)[1,])))
mt1 <- sort(cor(mtcars)[1,])
plot(mt1)
sapply(mt,names)
plot(mt1, x = sapply(mt,names))
plot(mt1)
plot(mt1, xlab = "Variable", ylab = "Correlation")
axis(1, at=1:10, labels=names(mt1))
axis(1, at=1:11, labels=names(mt1))
plot(mt1, xlab = "Variable", ylab = "Correlation with MPG")
axis(1, at=1:11, labels=names(mt1))
plot(mt1, xlab = "Variable", ylab = "Correlation with MPG")
axis(1, at=1:11, labels=FALSE)
plot(mt1, xlab = "Variable", ylab = "Correlation with MPG")
axis(1, at=1:11, labels=FALSE)
text(seq(1, 11, by=1), par("usr")[3] - 0.2, labels = names(mt), srt = 45, pos = 1, xpd = TRUE)
plot(mt1, xlab = "Variable", ylab = "Correlation with MPG")
text(seq(1, 11, by=1), par("usr")[3] - 0.2, labels = names(mt), srt = 45, pos = 1, xpd = TRUE)
plot(mt1, xlab = "Variable", ylab = "Correlation with MPG")
text(seq(1, 11, by=1), par("usr")[3] - 0.2, labels = names(mt1), srt = 45, pos = 1, xpd = TRUE)
plot(mt1, xlab = "Variable", ylab = "Correlation with MPG")
text(seq(1, 11, by=1), par("usr")[3] - 0.2, labels = names(mt1), srt = 45, pos = 1, xpd = TRUE)
plot(mt1, xlab = "Variable", ylab = "Correlation with MPG", xaxt='n', ann = FALSE)
text(seq(1, 11, by=1), par("usr")[3] - 0.2, labels = names(mt1), srt = 45, pos = 1, xpd = TRUE)
plot(mt1, xlab = "Variable", ylab = "Correlation with MPG", xaxt='n', ann = FALSE, col="blue")
plot(mt1, xlab = "Variable", ylab = "Correlation with MPG", xaxt='n', ann = FALSE, col="blue", pch=21)
plot(mt1, xlab = "Variable", ylab = "Correlation with MPG", xaxt='n', ann = FALSE, col="blue", pch=23)
plot(mt1, xlab = "Variable", ylab = "Correlation with MPG", xaxt='n', ann = FALSE, col="blue", pch=19)
text(seq(1, 11, by=1), par("usr")[3] - 0.2, labels = names(mt1), srt = 45, pos = 1, xpd = TRUE)
plot(mt1, xlab = "Variable", ylab = "Correlation with MPG", xaxt='n', ann = FALSE, col="blue", pch=19, main = "Variables Correlation with MPG")
text(seq(1, 11, by=1), par("usr")[3] - 0.2, labels = names(mt1), srt = 45, pos = 1, xpd = TRUE)
title(main=""Variables Correlation with MPG")
title(main="Variables Correlation with MPG")
mt1 <- sort(cor(mt)[1,])
mt <- mtcars
head(mt,10)
cs <- sapply(mt,class)
mt$am <- as.factor(mt$am)
levels(mt$am) <- c("Automatic","Manual")
head(mt,6)
mt1 <- sort(cor(mt)[1,])
sort(cor(mt)[1,])
(mt)[1,]
cor(mt)[1,]
(mt)[1,]
cor(mt)
sort(cor(mtcars)[1,])
mt1 <- sort(cor(mtcars)[1,])
install.packages("caret")
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing  <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
modFit <- train(Species ~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main="Classification Tree")
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex=.8)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
View(mtcars)
help(mtcars)
View(mtcars)
df <- mtcars
plot(df$mpg)
plot(df$mpg, col(df$am))
boxplot(mpg~am, data = df, main="Figura - Comparando as médias de mpg pelo tipo de câmbio",
col=topo.colors(2))
legend("topleft", inset = .02, title = "Type of Transmission",
c("manual","automatic"), fill = topo.colors(2), horiz = T, cex = 0.8)
boxplot(mpg~am, data = df, main="Figura - Comparando as médias de mpg pelo tipo de câmbio",
col=topo.colors(2))
legend("topleft", inset = .02, title = "Tipo de Transmissão",
c("manual","automático"), fill = topo.colors(2), horiz = T, cex = 0.8)
help(mtcars)
boxplot(mpg~am, data = df, main="Figura - Comparando as médias de mpg pelo tipo de câmbio",
col=topo.colors(2))
legend("topleft", inset = .02, title = "Tipo de Transmissão",
c("manual","automático"), fill = topo.colors(2), horiz = T, cex = 0.8)
legend("topleft", inset = .02, title = "Tipo de Transmissão",
c("automático","manual"), fill = topo.colors(2), horiz = T, cex = 0.8)
mean(df[df$am==1,]$mpg)
mean(df[df$am==0,$mpg)
mean(df[df$am==0,]$mpg)
legend("topleft", inset = .02, title = "Tipo de Transmissão",
c("automático","manual"), fill = topo.colors(2), horiz = T, cex = 0.8)
boxplot(mpg~am, data = df, main="Figura - Comparando as médias de mpg pelo tipo de câmbio",
col=topo.colors(2))
legend("topleft", inset = .02, title = "Tipo de Transmissão",
c("automático","manual"), fill = topo.colors(2), horiz = T, cex = 0.8)
plot(df$mpg, col = (df$am))
plot(df$mpg)
plot(df$mpg, col="blue")
ifelse(df$am, "blue", "red")
plot(df$mpg, col = ifelse(df$am, "blue", "red"))
plot(df$mpg, col = ifelse(df$am, "blue", "red"))
lines(mean(df[df$am==1,]$mpg))
lines(mean(df[df$am==1,]$mpg),c(1:32))
plot(df$mpg, col = ifelse(df$am, "blue", "red"))
lines(replicate(32,mean(df[df$am==1,]$mpg)) ,c(1:32))
lines(c(1:32), replicate(32,mean(df[df$am==1,]$mpg)))
plot(df$mpg, col = ifelse(df$am, "blue", "red"))
plot(df$mpg, col = ifelse(df$am==1, "blue", "red"))
plot(df$mpg, col = ifelse(df$am==0, "blue", "red"))
plot(df$mpg, col = ifelse(df$am==0, "blue", "red"))
lines(c(1:32), replicate(32,mean(df[df$am==0,]$mpg)), col="blue")
lines(c(1:32), replicate(32,mean(df[df$am==1,]$mpg)), col="red")
legend("topleft", inset = .02, title = "Tipo de Transmissão",
c("automático","manual"), fill = c("blue","red"), horiz = T, cex = 0.8)
plot(df$mpg, col = ifelse(df$am==0, "blue", "red"), main = "Figura2 - Comparando as médias de mpg pelo tipo de câmbio")
lines(c(1:32), replicate(32,mean(df[df$am==0,]$mpg)), col="blue")
lines(c(1:32), replicate(32,mean(df[df$am==1,]$mpg)), col="red")
legend("topleft", inset = .02, title = "Tipo de Transmissão",
c("automático","manual"), fill = c("blue","red"), horiz = T, cex = 0.8)
plot(df$mpg, col = ifelse(df$am==0, "blue", "red"), main = "Figura2 - Comparando as médias de mpg pelo tipo de câmbio")
lines(c(1:32), replicate(32,mean(df[df$am==0,]$mpg)), col="blue", lty=4)
lines(c(1:32), replicate(32,mean(df[df$am==1,]$mpg)), col="red", lty = 3)
legend("topleft", inset = .02, title = "Tipo de Transmissão",
c("automático","manual"), fill = c("blue","red"), horiz = T, cex = 0.8)
plot(df$mpg, col = ifelse(df$am==0, "blue", "red"), main = "Figura2 - Comparando as médias de mpg pelo tipo de câmbio")
lines(c(1:32), replicate(32,mean(df[df$am==0,]$mpg)), col="blue", lty=4)
lines(c(1:32), replicate(32,mean(df[df$am==1,]$mpg)), col="red", lty = 3)
legend("topleft", inset = .02, title = "Tipo de Transmissão",
c("automático","manual"), fill = c("blue","red"), horiz = T, cex = 0.8)
text(c(1:32), df$mpg, row.names(df))
plot(df$mpg, col = ifelse(df$am==0, "blue", "red"), main = "Figura2 - Comparando as médias de mpg pelo tipo de câmbio")
lines(c(1:32), replicate(32,mean(df[df$am==0,]$mpg)), col="blue", lty=4)
lines(c(1:32), replicate(32,mean(df[df$am==1,]$mpg)), col="red", lty = 3)
legend("topleft", inset = .02, title = "Tipo de Transmissão",
c("automático","manual"), fill = c("blue","red"), horiz = T, cex = 0.8)
text(c(1:32), df$mpg, row.names(df), cex = 0.2)
plot(df$mpg, col = ifelse(df$am==0, "blue", "red"), main = "Figura2 - Comparando as médias de mpg pelo tipo de câmbio")
lines(c(1:32), replicate(32,mean(df[df$am==0,]$mpg)), col="blue", lty=4)
lines(c(1:32), replicate(32,mean(df[df$am==1,]$mpg)), col="red", lty = 3)
legend("topleft", inset = .02, title = "Tipo de Transmissão",
c("automático","manual"), fill = c("blue","red"), horiz = T, cex = 0.8)
text(c(1:32), df$mpg, row.names(df), cex = 0.4)
plot(df$mpg, col = ifelse(df$am==0, "blue", "red"), main = "Figura2 - Comparando as médias de mpg pelo tipo de câmbio")
lines(c(1:32), replicate(32,mean(df[df$am==0,]$mpg)), col="blue", lty=4)
lines(c(1:32), replicate(32,mean(df[df$am==1,]$mpg)), col="red", lty = 3)
legend("topleft", inset = .02, title = "Tipo de Transmissão",
c("automático","manual"), fill = c("blue","red"), horiz = T, cex = 0.8)
text(c(1:32), df$mpg, row.names(df), cex = 0.6)
plot(df$mpg, col = ifelse(df$am==0, "blue", "red"), pch = 19, main = "Figura2 - Comparando as médias de mpg pelo tipo de câmbio")
lines(c(1:32), replicate(32,mean(df[df$am==0,]$mpg)), col="blue", lty=4)
lines(c(1:32), replicate(32,mean(df[df$am==1,]$mpg)), col="red", lty = 3)
legend("topleft", inset = .02, title = "Tipo de Transmissão",
c("automático","manual"), fill = c("blue","red"), horiz = T, cex = 0.8)
text(c(1:32), df$mpg, row.names(df), cex = 0.6)
plot(df$mpg, col = ifelse(df$am==0, "blue", "red"), pch = 19, main = "Figura2 - Comparando as médias de mpg pelo tipo de câmbio")
lines(c(1:32), replicate(32,mean(df[df$am==0,]$mpg)), col="blue", lty=4)
lines(c(1:32), replicate(32,mean(df[df$am==1,]$mpg)), col="red", lty = 3)
legend("topleft", inset = .02, title = "Tipo de Transmissão",
c("automático","manual"), fill = c("blue","red"), horiz = T, cex = 0.8)
text(c(1:32), df$mpg, row.names(df), cex = 0.6, pos=3)
library(twitteR)
library(ROAuth)
require(RCurl)
library(stringr)
library(tm)
library(ggmap)
library(dplyr)
library(plyr)
library(tm)
library(wordcloud)
library(rworldmap)
key="TcNm8xBB42Qtjf2cs8vl333Ih"
secret="laf2wx8EEyEMdf0OGgtCktyZRgSIrYjhP8b5TkF3KTZHRt8awy"
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem",
method="auto")
authenticate <- OAuthFactory$new(consumerKey=key,
consumerSecret=secret,
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
setup_twitter_oauth(key, secret)
save(authenticate, file="twitter authentication.Rdata")
N <- 200  # números de tweets
tweets <- searchTwitter('Rio+2016', n=N, lang="en-us")
texto <- sapply(tweets, function(x) x$getText())
lati <- sapply(tweets, function(x) as.numeric(x$getLatitude()))
longi=sapply(tweets, function(x) as.numeric(x$getLongitude()))
ecolidate=lapply(tweets, function(x) x$getCreated())
ecolidate =sapply(ecolidate, function(x) as.character(as.Date(x)))
df_tweets=as.data.frame(cbind(tweet=texto,date=ecolidate,lat=lati,lon=longi))
View(df_tweets)
library(twitteR)
library(ROAuth)
require(RCurl)
library(stringr)
library(tm)
library(ggmap)
library(dplyr)
library(plyr)
library(tm)
library(wordcloud)
library(rworldmap)
library(Rstem)
library(sentiment)
### conectando no twitter
key="Eupp04GS62eLaOYxOKqQ4inBd"
secret="urXEMywXeyQZpXNNgmitIP5cOwLwxmBTsqJhhN1uXMnZjQUiYl"
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem",
method="auto")
authenticate <- OAuthFactory$new(consumerKey=key,
consumerSecret=secret,
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
setup_twitter_oauth(key, secret)
setup_twitter_oauth(key, secret)
save(authenticate, file="twitter authentication.Rdata")
N <- 5000  # números de tweets
tweets <- searchTwitter('Rio+2016', n=N, lang="en")
texto <- sapply(tweets, function(x) x$getText())
lati <- sapply(tweets, function(x) as.numeric(x$getLatitude()))
longi=sapply(tweets, function(x) as.numeric(x$getLongitude()))
ecolidate=lapply(tweets, function(x) x$getCreated())
ecolidate =sapply(ecolidate, function(x) as.character(as.Date(x)))
df_tweets= data.frame(lapply(as.data.frame(cbind(tweet=texto,date=ecolidate,lat=lati,lon=longi)),as.character), stringsAsFactors = F)
data=filter(df_tweets, lat != 'numeric(0)', lon != 'numeric(0)')
data <- cbind(data,classify_polarity(data$tweet, algorithm = "bayes", pstrong = 0.5, verbose = FALSE)[,"BEST_FIT"])
names(data) <- c("tweet","date","lat","lon","classificacao")
View(data)
save(data,file="tweets.RData")
getwd()
mapa <- get_map(location = c(lon = mean(data$lon), lat = mean(data$lat)), zoom = 4,
maptype = "satellite", scale = 2)
mapa <- get_map(location = c(lon = mean(as.numeric(data$lon)), lat = mean(as.numeric(data$lat))), zoom = 4,
maptype = "satellite", scale = 2)
ggmap(mapa) +
geom_point(data = data, aes(x = lon, y = lat, fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
ggmap(mapa) +
geom_point(data = data, aes(x = as.numeric(lon), y = as.numeric(lat), fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapa <- get_map(location = c(lon = mean(as.numeric(data$lon)), lat = mean(as.numeric(data$lat))), zoom = 10,
maptype = "terrain", scale = 2)
ggmap(mapa) +
geom_point(data = data, aes(x = as.numeric(lon), y = as.numeric(lat), fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
# captura o mapa
mapa <- get_map(location = c(lon = mean(as.numeric(data$lon)), lat = mean(as.numeric(data$lat))), zoom = 7,
maptype = "satellite", scale = 2)
ggmap(mapa)
geom_point(data = data, aes(x = as.numeric(lon), y = as.numeric(lat), fill = "red", alpha = 0.8), size = 5, shape = 21)
guides(fill=FALSE, alpha=FALSE, size=FALSE)
mapa <- get_map(location = c(lon = mean(as.numeric(data$lon)), lat = mean(as.numeric(data$lat))), zoom = 4,
maptype = "satellite", scale = 2)
ggmap(mapa) +
geom_point(data = data, aes(x = as.numeric(lon), y = as.numeric(lat), fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
View(data)
cp <- Corpus(VectorSource(df_tweets$tweet))
cp <- tm_map(cp, content_transformer(tolower))
cp <- tm_map(cp, removePunctuation)
cp <- tm_map(cp, function(x)removeWords(x,stopwords()))
wordcloud(r_stats_text_corpus)
wordcloud(cp)
myCorpus <- Corpus(VectorSource(df_tweets$text))
myCorpus <- tm_map(myCorpus, tolower)
myCorpus <- tm_map(myCorpus, removePunctuation)
removeURL <- function(x) gsub("http[[:alnum:]]*","",x)
myCorpus <- tm_map(myCorpus, removeURL)
myCorpus <- tm_map(myCorpus,removeWords,stopwords("portuguese"))
myCorpus <- tm_map(myCorpus,PlainTextDocument)
myTdm <- TermDocumentMatrix(tm_map(myCorpus,stemDocument), control = list(wordLengths=c(1,Inf)))
findFreqTerms(myTdm, lowfreq = 5)
termFrequency <- rowSums(as.matrix(myTdm))
termFrequency <- subset(termFrequency, termFrequency>=20)
barplot(termFrequency, las=2, main="Termos mais Comentados Twitter após o Debate")
m <- as.matrix(myTdm)
wordFreq <- sort(rowSums(m), decreasing = T)
set.seed(375)
grayLevels <- gray( ((wordFreq) - min(wordFreq)) / max(wordFreq))
set.seed(375)
wordcloud(words = names(wordFreq), freq = wordFreq, min.freq = 5, random.order = F)
names(wordFreq)
sort(rowSums(m), decreasing = T)
m <- as.matrix(myTdm)
myTdm
plot(tdm, term = freq.terms, corThreshold = 0.12, weighting = T)
myCorpus <- Corpus(VectorSource(df_tweets$text))
Corpus(VectorSource(df_tweets$text))
df_tweets$text
myCorpus <- Corpus(VectorSource(df_tweets$tweet))
myCorpus <- tm_map(myCorpus, tolower)
myCorpus <- tm_map(myCorpus, removePunctuation)
# remove URLs
removeURL <- function(x) gsub("http[[:alnum:]]*","",x)
myCorpus <- tm_map(myCorpus, removeURL)
myCorpus <- tm_map(myCorpus,removeWords,stopwords("portuguese"))
myCorpus <- tm_map(myCorpus,PlainTextDocument)
myTdm <- TermDocumentMatrix(tm_map(myCorpus,stemDocument), control = list(wordLengths=c(1,Inf)))
myTdm
install.packages("graph")
install.packages("Rgraphviz")
myCorpus <- Corpus(VectorSource(df_tweets$tweet))
myCorpus <- tm_map(myCorpus, tolower)
myCorpus <- tm_map(myCorpus, removePunctuation)
removeURL <- function(x) gsub("http[[:alnum:]]*","",x)
myCorpus <- tm_map(myCorpus, removeURL)
myCorpus <- tm_map(myCorpus,removeWords,stopwords("portuguese"))
myCorpus <- tm_map(myCorpus,PlainTextDocument)
myTdm <- TermDocumentMatrix(tm_map(myCorpus,stemDocument), control = list(wordLengths=c(1,Inf)))
m <- as.matrix(myTdm)
wordFreq <- sort(rowSums(m), decreasing = T)
#Para ser replicavel
set.seed(375)
wordcloud(words = names(wordFreq), freq = wordFreq, min.freq = 5, random.order = F)
wordcloud(words = names(wordFreq), freq = wordFreq, min.freq = 50, random.order = F)
df_tweets <- cbind(df_tweets,classify_polarity(df_tweets$tweet, algorithm = "bayes", pstrong = 0.5, verbose = FALSE)[,"BEST_FIT"])
names(df_tweets) <- c("tweet","date","lat","lon","classificacao")
save(data,file="tweets.RData")
View(df_tweets)
plot(df_tweets$classificacao)
table(df_tweets$classificacao)
plot(table(df_tweets$classificacao))
barplot2(df_tweets,legend = rownames(df_tweets$classificacao))
barplot(df_tweets,legend = rownames(df_tweets$classificacao))
mtrix <- t(df_tweets[-1])
colnames(mtrix) <- mydf[, 1]
colnames(mtrix) <- df_tweets[, 1]
barplot(mtrix, beside = TRUE)
table(df_tweets$classificacao)
plot(table(df_tweets$classificacao))
barplot((table(df_tweets$classificacao)))
names(table(df_tweets$classificacao))
barplot((table(df_tweets$classificacao)), xlab = names(table(df_tweets$classificacao)))
table(df_tweets$classificacao)
df_tweets2=filter(df_tweets, lat != 'numeric(0)', lon != 'numeric(0)')
mapa <- get_map(location = c(lon = mean(as.numeric(df_tweets2$lon)), lat = mean(as.numeric(df_tweets2$lat))), zoom = 4,
maptype = "satellite", scale = 2)
ggmap(mapa) +
geom_point(data = data, aes(x = as.numeric(lon), y = as.numeric(lat), fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
library(twitteR)
library(ROAuth)
require(RCurl)
library(stringr)
library(tm)
library(ggmap)
library(dplyr)
library(plyr)
library(tm)
library(wordcloud)
library(rworldmap)
library(Rstem)
library(sentiment)
key="Eupp04GS62eLaOYxOKqQ4inBd"
secret="urXEMywXeyQZpXNNgmitIP5cOwLwxmBTsqJhhN1uXMnZjQUiYl"
download.file(url="http://curl.haxx.se/ca/cacert.pem",
destfile="cacert.pem",
method="auto")
authenticate <- OAuthFactory$new(consumerKey=key,
consumerSecret=secret,
requestURL="https://api.twitter.com/oauth/request_token",
accessURL="https://api.twitter.com/oauth/access_token",
authURL="https://api.twitter.com/oauth/authorize")
setup_twitter_oauth(key, secret)
save(authenticate, file="twitter authentication.Rdata")
N <- 5000  # números de tweets
tweets <- searchTwitter('Rio+2016', n=N, lang="en")
lati <- sapply(tweets, function(x) as.numeric(x$getLatitude()))
longi=sapply(tweets, function(x) as.numeric(x$getLongitude()))
ecolidate=lapply(tweets, function(x) x$getCreated())
ecolidate =sapply(ecolidate, function(x) as.character(as.Date(x)))
df_tweets= data.frame(lapply(as.data.frame(cbind(tweet=texto,date=ecolidate,lat=lati,lon=longi)),as.character), stringsAsFactors = F)
texto <- sapply(tweets, function(x) x$getText())
df_tweets= data.frame(lapply(as.data.frame(cbind(tweet=texto,date=ecolidate,lat=lati,lon=longi)),as.character), stringsAsFactors = F)
myCorpus <- Corpus(VectorSource(df_tweets$tweet))
myCorpus <- tm_map(myCorpus, tolower)
myCorpus <- tm_map(myCorpus, removePunctuation)
removeURL <- function(x) gsub("http[[:alnum:]]*","",x)
myCorpus <- tm_map(myCorpus, removeURL)
myCorpus <- tm_map(myCorpus,removeWords,stopwords("english"))
myCorpus <- tm_map(myCorpus,PlainTextDocument)
myTdm <- TermDocumentMatrix(tm_map(myCorpus,stemDocument), control = list(wordLengths=c(1,Inf)))
myCorpus
myCorpus <- tm_map(myCorpus,PlainTextDocument)
myTdm <- TermDocumentMatrix(tm_map(myCorpus,stemDocument), control = list(wordLengths=c(1,Inf)))
m <- as.matrix(myTdm)
wordFreq <- sort(rowSums(m), decreasing = T)
set.seed(375)
wordcloud(words = names(wordFreq), freq = wordFreq, min.freq = 50, random.order = F)
df_tweets <- cbind(df_tweets,classify_polarity(df_tweets$tweet, algorithm = "bayes", pstrong = 0.5, verbose = FALSE)[,"BEST_FIT"])
names(df_tweets) <- c("tweet","date","lat","lon","classificacao")
table(df_tweets$classificacao)
df_tweets2=filter(df_tweets, lat != 'numeric(0)', lon != 'numeric(0)')
View(df_tweets2)
mapa <- get_map(location = c(lon = mean(as.numeric(df_tweets2$lon)), lat = mean(as.numeric(df_tweets2$lat))), zoom = 4,
maptype = "satellite", scale = 2)
ggmap(mapa) +
geom_point(data = data, aes(x = as.numeric(lon), y = as.numeric(lat), fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
ggmap(mapa)
geom_point(data = data, aes(x = as.numeric(lon), y = as.numeric(lat), fill = "red", alpha = 0.8), size = 5, shape = 21)
guides(fill=FALSE, alpha=FALSE, size=FALSE)
df_tweets2=filter(df_tweets, lat != 'numeric(0)', lon != 'numeric(0)')
mapa <- get_map(location = c(lon = mean(as.numeric(df_tweets2$lon)), lat = mean(as.numeric(df_tweets2$lat))), zoom = 4,
maptype = "satellite", scale = 2)
ggmap(mapa) +
geom_point(data = df_tweets2, aes(x = as.numeric(lon), y = as.numeric(lat), fill = "red", alpha = 0.8), size = 5, shape = 21) +
guides(fill=FALSE, alpha=FALSE, size=FALSE)
install.packages("rCharts")
require(rCharts)
install.packages("devtools")
install.packages("Rcpp")
library(devtools)
library(Rcpp)
install_github('ramnathv/rCharts')
require(rCharts)
he <- as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type='multiBarChart', data=subset(he, Sex=='Male'))
n1$save('n1.html', cdn=TRUE)
nPlot(Freq ~ Hair, group = 'Eye', type='multiBarChart', data=subset(he, Sex=='Male'))
rPlot(SepalLength ~ SepalWidth | Species, data=iris, color='Species', type='point')
head(iris)
rPlot(Sepal.Length ~ Sepal.Width | Species, data=iris, color='Species', type='point')
nPlot(Sepal.Length ~ Sepal.Width | Species, data=iris, color='Species', type='point')
rPlot(mpg ~ wt | am + vs, data = mtcars, type="point", color="gear")
rPlot(Sepal.Length ~ Sepal.Width | Species, data=iris, color="Species", type="point")
rPlot(mpg ~ wt | am + vs, data = mtcars, type="point", color="gear")
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
head(econ)
mPlot(x="date", y=c("psavert","uempmed"), type="Line", data=econ)
map3 <- Leaflet$new()
map3$setView(c(23.3340,46.3921), zoom = 13)
map3$save('map3.html', cdn=TRUE)
cat('<iframe src="map3.html" width=100%, height=600></iframe>')
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height=400))
print(M, "chart")
plot(M)
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit",
options = list(width = 600, height = 400))
plot(G)
install_github("ropensci/plotly")
library(plotly)
library(shiny)
install.packages('shiny')
library(shiny)
library(datasets)
runApp('C:/Users/Reinaldo/Desktop/coursera-JHU/dataproducts/week4/devdataprod-cp-master/part1_devdataprod-shiny')
